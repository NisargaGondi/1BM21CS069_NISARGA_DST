#include <stdio.h>

#define SIZE 5

int item[SIZE];
int f = -1, r = -1;

// Check if the queue is full
int isFull() {
  if ((f == r + 1) || (f == 0 && r == SIZE - 1)) return 1;
  return 0;
}

// Check if the queue is empty
int isEmpty() {
  if (f == -1) return 1;
  return 0;
}

// Adding an element
void enQueue(int element) {
  if (isFull())
    printf("\n Queue is full!! \n");
  else {
    if (f == -1) f = 0;
    r = (r + 1) % SIZE;
    item[r] = element;
    printf("\n Inserted -> %d", element);
  }
}

// Removing an element
int deQueue() {
  int element;
  if (isEmpty()) {
    printf("\n Queue is empty !! \n");
    return (-1);
  } else {
    element = item[f];
    if (f == r) {
      f = -1;
      r = -1;
    } 
    // Q has only one element, so we reset the 
    // queue after dequeing it. ?
    else {
      f = (f + 1) % SIZE;
    }
    printf("\n Deleted element -> %d \n", element);
    return (element);
  }
}

// Display the queue
void display() {
  int i;
  if (isEmpty())
    printf(" \n Empty Queue\n");
  else {
    printf("\n Front -> %d ", f);
    printf("\n Items -> ");
    for (i = f; i != r; i = (i + 1) % SIZE) {
      printf("%d ", item[i]);
    }
    printf("%d ", item[i]);
    printf("\n Rear -> %d \n", r);
  }
}

int main()
{
    
    int n, item , del_value;
   
    while(1)
    {
        printf("\nchoose the following : \n 1. inset element \n 2. delete element \n 3. display elements \n 4. Exit\n ");
        scanf("%d", &n);
       
        switch(n)
        {
            case 1 : printf("enter the element \n");
                    scanf("%d",&item);
                    enQueue(item);
                    break;
                   
            case 2 : del_value = deQueue();
                    printf("deleted value is : %d \n", del_value);
                    break ;
                   
            case 3 : display();
                    break;
           
           
            default : printf("Invalid input!!!");
        }

       
    }
   
   
}


or 

#include<stdio.h>
#include<stdlib.h>
#define qsize 3
int count=0;
void insert_rear(int q[],int item,int*r)
{
    if (count==qsize)
    printf("queue overflow\n");
    else
    {
        (*r)++;
        (*r)=(*r)%qsize;
        q[*r]=item;
        count++;
    }
}
int delete_front (int q[],int*f,int*r)
{
    int del_item;
    if (count==0)
    {
        printf("queue underflow");
    }
    else
    {
        del_item=q[*f];
        *f=((*f)++)%qsize;
        count--;
        return del_item;
    }
}
void display(int q[],int * f)
{
    int i,temp;
    temp=*f;
    for(i=0;i<count;i++)
    {
        printf("%d\n",q[temp]);
        temp=(temp+1)%qsize;
    }
}
void main()
{
    int r=-1;
    int f=0;
    int item,q[qsize];
    int n,i;
    while(1)
{
    printf("choose from the following\n1.Insert\n2.Delete\n3.Display\n4.Exit\n");
    scanf("%d",&n);
    
    switch(n)
    {
        case 1:printf("enter the item to be inserted\n");
            scanf("%d",&item);
            insert_rear(q,item,&r);
             break;
        case 2:i=delete_front(q,&f,&r);
            printf("item being deleted is %d\n",i);
             break;
        case 3:display(q,&f);
             break;
        case 4:exit(0);
        default:printf("enter correct option number\n");
             break;
    }
    }

}

